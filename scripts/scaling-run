#!/bin/bash

# Generates slurm batch scripts for running
# strong/weak scaling benchmarks on a cluster,
# and gnuplot scripts for result plotting.
#
# Author: Hoby Rakotoarivelo

# Run params
CLUSTER=""
SUPPORTED_CLUSTERS=( "darwin" "snow" "grizzly" )
SCALING_TYPE="strong"
NODES=1
RANKS=""
CORES=1
THREADS=""
EXTENT=0
MAX_NODES=1
MAX_THREADS=1
RANKS_PER_NODE=1
THREADS_PER_CORE=1
REVERSE_RANKS="n"
PARTITION=""
HYPERTHREADING=false
OPENMP_ONLY=false
WEAK_SCALE_ONLY=""
THREAD_FLAG="n"
COMPILER="intel"
CXX_VERSION=0.0.0
CPU_AFFINITY=""
MODE=""
USER=""

# Version numbers
MPI_VERSION=""
BOOST_VERSION=""
SOURCE_DIR="$(pwd)/.."
DATA_DIR="../test_data"
BUILD_DIR=""

# Remap params
APP=""
MPI_ARGS=""
DIMENSION=0
SOURCE_SIZE=0
SOURCE_MAX=0
TARGET_SIZE=0
TARGET_MAX=0
ENTITY_KIND=""
FIELD=""
MATER_FIELD=""
SOURCE_FILE=""
TARGET_FILE=""
MATER_FILE=""
IS_CONVEX=""
IS_CONFORMAL=""
REMAP_ORDER=0
FIELD_ORDER=0
RESULT_FILE=""

# available limiters
INTER_LIMIT=( "no_limiter" "barth_jespersen" )
BOUND_LIMIT=( "no_limiter" "zero_gradient" "barth_jespersen" )

# RGMD options
RGMD_PROBLEMS=( "tjunction" "srcpurecells" "ball" "rotor" )
PROBLEM_TYPE=""
CONVEX_SOURCE="y"
CONVEX_TARGET="y"
LIMITER="no_limiter"
BOUNDARY_LIMITER="no_limiter"

# Note:
# -e: fail if some command exits with non zero status
# -u: treat undefined variables as error
# -o pipefail: pipe ok if all involved commands are ok
set -e             
set -u
set -o pipefail

print_usage() {

  # options formatting
  _CHOICE="\e[32m<choice>\e[0m"
  _STRING="\e[32m<string>\e[0m"
  _PATH="\e[32m<path>\e[0m"
  _INT="\e[32m<int>\e[0m"
  _INT_PATH="\e[32m<int|path>\e[0m"

  echo -e "Usage: \e[32m./scaling-run [options]\e[0m"
  echo -e "Options:"
  echo -e "  --help, -h                show this help message and exit"
  echo -e "  --app $_CHOICE            current app [t-junction|core|multimat]"
  echo -e "  --problem $_CHOICE        multimat problem [tjunction|srcpurecells|ball|rotor]"
  echo -e "  --limiter $_STRING        gradient limiter for multimat"
  echo -e "  --bound-limit $_STRING    boundary gradient limiter for multimat"
  echo -e "  --cluster $_CHOICE        current cluster [darwin|snow|grizzly]"
  echo -e "  --build                   rebuild the app"
  echo -e "  --nodes $_INT             number of nodes"
  echo -e "  --ranks $_INT             ranks per node"
  echo -e "  --partition $_STRING      slurm partition"
  echo -e "  --user $_STRING           slurm user"
  echo -e "  --compiler $_CHOICE       compiler [intel|gcc]"
  echo -e "  --hyper                   enable hyperthreading"
  echo -e "  --dim $_INT               mesh dimension [2|3]"
  echo -e "  --field $_STRING          mesh field to remap"
  echo -e "  --field-order $_INT       field order"
  echo -e "  --source $_INT_PATH       source mesh size or file"
  echo -e "  --target $_INT_PATH       target mesh size or file"
  echo -e "  --material-field $_STRING material field function"
  echo -e "  --material-file $_PATH    material field file"
  echo -e "  --entity $_CHOICE         remap entity kind [cell|node]"
  echo -e "  --order $_INT             interpolation order"
  echo -e "  --conform                 conformal meshes"
  echo -e "  --convex                  convex polygons"
  echo -e "  --scaling                 scaling type [strong|weak]"
  echo -e "  --thread-scale            thread scaling only"
  echo -e "  --results $_PATH          results output file"
  exit 1
}

print_params() {
  echo -e "Run params for \e[32m${APP}\e[0m app:"
  echo -e "- nodes: \e[32m${MAX_NODES}\e[0m"
  echo -e "- cluster: \e[32m${CLUSTER}\e[0m"
  echo -e "- partition: \e[32m${PARTITION}\e[0m"
  echo -e "- slurm user: \e[32m${USER}\e[0m"
  echo -e "- cores_per_node: \e[32m${CORES}\e[0m"
  echo -e "- ranks_per_node: \e[32m${RANKS_PER_NODE}\e[0m"
  echo -e "- scaling_type: \e[32m${SCALING_TYPE}\e[0m"
  echo -e "- threads_per_rank: \e[32m${MAX_THREADS}\e[0m"
  echo -e "- hyperthreading: \e[32m${HYPERTHREADING}\e[0m"
  echo -e "- compiler: \e[32m${COMPILER}\e[0m"

  case "${APP}" in
    "t-junction")
      echo -e "- dimension: \e[32m${DIMENSION}\e[0m"
      echo -e "- source_cells: \e[32m${SOURCE_MAX}\e[0m"
      echo -e "- target_cells: \e[32m${TARGET_MAX}\e[0m"
      echo -e "- conformal: \e[32m${IS_CONFORMAL}\e[0m"
      echo -e "- material_field: \e[32m${MATER_FIELD}\e[0m"
      echo -e "- entity_kind: \e[32m${ENTITY_KIND}\e[0m"
      echo -e "- interpolation order: \e[32m${REMAP_ORDER}\e[0m";;
    "timing")
      echo -e "- dimension: \e[32m${DIMENSION}\e[0m"
      echo -e "- source_cells: \e[32m${SOURCE_MAX}\e[0m"
      echo -e "- target_cells: \e[32m${TARGET_MAX}\e[0m"
      echo -e "- conformal: \e[32m${IS_CONFORMAL}\e[0m"
      echo -e "- reverse_ranks: \e[32m${REVERSE_RANKS}\e[0m"
      echo -e "- weak_scale: \e[32m${WEAK_SCALE_ONLY}\e[0m"
      echo -e "- entity_kind: \e[32m${ENTITY_KIND}\e[0m"
      echo -e "- interpolation order: \e[32m${REMAP_ORDER}\e[0m"
      echo -e "- field order: \e[32m${FIELD_ORDER}\e[0m";;
    "rgmd")
      echo -e "- dimension: \e[32m${DIMENSION}\e[0m"
      echo -e "- problem type: \e[32m${PROBLEM_TYPE}\e[0m"
      echo -e "- source_cells: \e[32m${SOURCE_MAX}\e[0m"
      echo -e "- target_cells: \e[32m${TARGET_MAX}\e[0m"
      echo -e "- conformal: \e[32m${IS_CONFORMAL}\e[0m"
      echo -e "- material_field: \e[32m${MATER_FIELD}\e[0m"
      echo -e "- entity_kind: \e[32m${ENTITY_KIND}\e[0m"
      echo -e "- convex_source: \e[32m${CONVEX_SOURCE}\e[0m"
      echo -e "- convex_target: \e[32m${CONVEX_TARGET}\e[0m"
      echo -e "- limiter: \e[32m${LIMITER}\e[0m"
      echo -e "- interpolation order: \e[32m${REMAP_ORDER}\e[0m";;
    (*)
      echo -e "- dimension: \e[32m${DIMENSION}\e[0m"
      [ "${SOURCE_FILE}" != "" ] && \
        echo -e "- source_file: \e[32m${SOURCE_FILE}\e[0m" || \
        echo -e "- source_cells: \e[32m${SOURCE_MAX}\e[0m"
      [ "${TARGET_FILE}" != "" ] && \
        echo -e "- target_file: \e[32m${TARGET_FILE}\e[0m" || \
        echo -e "- target_cells: \e[32m${TARGET_MAX}\e[0m"
      echo -e "- field: \e[32m${FIELD}\e[0m"
      echo -e "- convex: \e[32m${IS_CONVEX}\e[0m"
      echo -e "- conformal: \e[32m${IS_CONFORMAL}\e[0m"
      echo -e "- material_field: \e[32m${MATER_FIELD}\e[0m"
      echo -e "- entity_kind: \e[32m${ENTITY_KIND}\e[0m"
      echo -e "- interpolation order: \e[32m${REMAP_ORDER}\e[0m"
      echo -e "- results_file: \e[32m${RESULT_FILE}\e[0m";;
  esac
}

check_params() {

  # invalid cluster
  if [ $(echo "${SUPPORTED_CLUSTERS[*]}" | grep -c -w "${CLUSTER}") -ne 1 ]; then
    echo -e "\e[31mError: unsupported cluster '${CLUSTER}'\e[0m"
    exit 1
  # invalid number of nodes
  elif [[ ! "${MAX_NODES}" =~ ^[0-9]+$ ]] || (( ${MAX_NODES} < 1 )); then
    echo -e "\e[31mError: invalid number of nodes\e[0m"
    exit 1
  # no support for distributed multimat
  elif [ "${APP}" = "multimat" ] && (( ${MAX_NODES} > 1 )); then
    echo -e "\e[31mSorry, distributed multimat is not yet supported\e[0m"
    exit 1
  # invalid rank per node
  elif [[ ! "${RANKS_PER_NODE}" =~ ^[0-9]+$ ]] \
       || (( ${RANKS_PER_NODE} < 1 )) || (( ${RANKS_PER_NODE} > ${CORES})); then
    echo -e "\e[31mError: invalid rank per node\e[0m"
    exit 1
  # unsupported compiler
  elif [ "${COMPILER}" != "intel" ] && [ "${COMPILER}" != "gcc" ]; then
    echo -e "\e[31mError: unsupported compiler '${COMPILER}'\e[0m"
    exit 1
  # invalid mesh dimension
  elif [[ ! "${DIMENSION}" =~ ^[2-3]$ ]]; then 
    echo -e "\e[31mError: invalid mesh dimension [2|3]\e[0m"
    exit 1
  # neither a source exodus file nor a source cells extent supplied
  elif [ ! -f ${SOURCE_FILE} ] \
    && { [[ ! "${SOURCE_MAX}" =~ ^[0-9]+$ ]] || (( ${SOURCE_MAX} < 1)); }; then
    echo -e "\e[31mError: invalid source file or cells count\e[0m"
    exit 1 
  # neither a target exodus file nor a target cells extent supplied
  elif [ ! -f ${TARGET_FILE} ] \
    && { [[ ! "${TARGET_MAX}" =~ ^[0-9]+$ ]] || (( ${TARGET_MAX} < 1)); }; then
    echo -e "\e[31mError: invalid target file or cells count\e[0m"
    exit 1
  # mandatory source file
  elif { [ ${SOURCE_MAX} -eq 0 ] || [ "${APP}" = "multimat" ]; } \
    && [ ! -f ${SOURCE_FILE} ]; then
    echo -e "\e[31mError: invalid source file '${SOURCE_FILE}'\e[0m"
    exit 1
  # mandatory target file
  elif { [ ${TARGET_MAX} -eq 0 ] || [ "${APP}" = "multimat" ]; } \
    && [ ! -f ${TARGET_FILE} ]; then
    echo -e "\e[31mError: invalid target file '${TARGET_FILE}'\e[0m"
    exit 1
  # unknown entity kind
  elif [ "${ENTITY_KIND}" != "cell" ] && [ "${ENTITY_KIND}" != "node" ]; then
    echo -e "\e[31mError: invalid '${ENTITY_KIND}' entity kind\e[0m"
    exit 1
  # invalid interpolation order
  elif [[ ! "${REMAP_ORDER}" =~ ^[1-2]$ ]]; then
    echo -e "\e[31mError: invalid remap order [1-2]\e[0m"
    exit 1 
  # invalid field order
  elif [[ ! "${FIELD_ORDER}" =~ ^[0-2]$ ]]; then
    echo -e "\e[31mError: invalid field order [0-2]\e[0m"
    exit 1 
  # invalid scaling type
  elif [ "${SCALING_TYPE}" != "strong" ] && [ "${SCALING_TYPE}" != "weak" ]; then
    echo -e "\e[31mError: invalid scaling type '${SCALING_TYPE}'\e[0m"
    exit 1
  # invalid gradient limiter
  elif [ $(echo "${INTER_LIMIT[*]}" | grep -c -w "${LIMITER}") -ne 1 ]; then
    echo -e "\e[31mError: invalid gradient limiter ${LIMITER}\e[0m"
    exit 1
  # invalid boundary gradient limiter
  elif [ $(echo "${BOUND_LIMIT[*]}" | grep -c -w "${BOUNDARY_LIMITER}") -ne 1 ]; then
    echo -e "\e[31mError: invalid boundary limiter ${BOUNDARY_LIMITER}\e[0m"
    exit 1
  elif [ "${APP}" = "rgmd" ]; then
    # unsupported multimat problem
    if [ $(echo "${RGMD_PROBLEMS[*]}" | grep -c -w "${PROBLEM_TYPE}") -ne 1 ]; then
      echo -e "\e[31mError: unsupported multimat problem '${PROBLEM_TYPE}'\e[0m"
      exit 1
    # invalid option for convex-source
    elif [ -z "${MATER_FIELD}" ]; then
      echo -e "\e[31mError: no material fields specified\e[0m"
      exit 1
    fi
  elif [ "${PROBLEM_TYPE}" != "" ]; then
    echo -e "\e[31mError: problem is only required for multimat\e[0m"
    exit 1
  fi

  # print params eventually
  print_params  
}

set_default_params() {

  # set default cluster, partition and MPI version
  if [ "${CLUSTER}" = "" ]; then
    CLUSTER="${SUPPORTED_CLUSTERS[0]}"
  fi

  case "${CLUSTER}" in
    darwin)
      [ "${PARTITION}" = "" ] && PARTITION="scaling";
      MPI_VERSION="2.1.5"; BOOST_VERSION="1.68.0";;
    snow|grizzly)
      [ "${PARTITION}" = "" ] && PARTITION="standard";
      MPI_VERSION="2.1.2";;
    *)
      echo -e "\e[31mError: unsupported cluster ${CLUSTER}\e[0m"
      exit 1;;
  esac

  # set app default parameters
  case "${APP}" in
    "t-junction")
      [ "${DIMENSION}" -eq 0 ] && DIMENSION=3
      [ "${SOURCE_MAX}" -eq 0 ] && SOURCE_MAX=40
      [ "${TARGET_MAX}" -eq 0 ] && TARGET_MAX=120
      [ "${ENTITY_KIND}" != "" ] || ENTITY_KIND="cell"
      [ "${IS_CONFORMAL}" != "" ] || IS_CONFORMAL="y"
      [ "${IS_CONVEX}" != "" ] || IS_CONVEX="y"
      [ "${MATER_FIELD}" != "" ] || MATER_FIELD="'x','y','z'"
      [ "${REMAP_ORDER}" -eq 0 ] && REMAP_ORDER="2";;
    "timing")
      [ "${DIMENSION}" -eq 0 ] && DIMENSION=2
      [ "${SOURCE_MAX}" -eq 0 ] && SOURCE_MAX=40
      [ "${TARGET_MAX}" -eq 0 ] && TARGET_MAX=120
      [ "${ENTITY_KIND}" != "" ] || ENTITY_KIND="cell"
      [ "${IS_CONFORMAL}" != "" ] || IS_CONFORMAL="y"
      [ "${IS_CONVEX}" != "" ] || IS_CONVEX="y"
      [ "${REVERSE_RANKS}" != "" ] || REVERSE_RANKS="n"
      [ "${WEAK_SCALE_ONLY}" != "" ] || WEAK_SCALE_ONLY="n"
      [ "${REMAP_ORDER}" -eq 0 ] && REMAP_ORDER=1
      [ "${FIELD_ORDER}" -eq 0 ] && FIELD_ORDER=0;;
    "rgmd")
      [ "${DIMENSION}" -eq 0 ] && DIMENSION=3
      [ "${PROBLEM_TYPE}" != "" ] || PROBLEM_TYPE="${RGMD_PROBLEMS[0]}"
      [ "${SOURCE_MAX}" -eq 0 ] && SOURCE_MAX=50
      [ "${TARGET_MAX}" -eq 0 ] && TARGET_MAX=70
      [ "${ENTITY_KIND}" != "" ] || ENTITY_KIND="cell"
      [ "${CONVEX_SOURCE}" != "" ] || CONVEX_SOURCE="y"
      [ "${CONVEX_TARGET}" != "" ] || CONVEX_TARGET="y"
      [ "${MATER_FIELD}" != "" ] || MATER_FIELD="'x','y','z'"
      [ "${LIMITER}" != "" ] || LIMITER="${INTER_LIMIT[0]}"
      [ "${BOUNDARY_LIMITER}" != "" ] || BOUNDARY_LIMITER="${BOUND_LIMIT[0]}"
      [ "${REMAP_ORDER}" -eq 0 ] && REMAP_ORDER=1;;
    (*)
      echo -e "\e[31mError: unsupported app '${APP}'\e[0m"
      exit 1;;
  esac
}


setup_run_options() {

  # set build directory  
  BUILD_DIR="${SOURCE_DIR}/build-${COMPILER}"
  
  # slurm partition  
  #CORES=$(grep ^cpu\\scores /proc/cpuinfo | uniq |  awk '{print $4}');
  #LOG_CORES=$(nproc --all);
  #THREADS_PER_CORE=$((LOG_CORES / CORES));;

  if [ "${CLUSTER}" = "darwin" ]; then
    case "${PARTITION}" in
      scaling|volta-x86) CORES=16; THREADS_PER_CORE=2;;
      skylake-gold) CORES=22; THREADS_PER_CORE=2;;
      (*)
        echo -e "\e[31mError: unsupported partition ${PARTITION} on ${CLUSTER}\e[0m"
        exit 1;;
    esac
  else # snow|grizzly
    case "${PARTITION}" in
      standard|any) CORES=36; THREADS_PER_CORE=2;;
      (*)
        echo -e "\e[31mError: unsupported partition ${PARTITION} on ${CLUSTER}\e[0m"
        exit 1;;
    esac
  fi

  # set CPU affinity options
  if [ "${HYPERTHREADING}" = true ]; then
    [ "COMPILER" = "intel" ] && GRAIN="fine" || GRAIN="threads"
  else
    THREADS_PER_CORE=1
    [ "COMPILER" = "intel" ] && GRAIN="core" || GRAIN="cores"
  fi

  # check compiler, set appropriate version and CPU affinity policy
  if [ "${COMPILER}" = "intel" ]; then
    [ "${CLUSTER}" = "darwin" ] && CXX_VERSION=18.0.3 || CXX_VERSION=18.0.5
    CPU_AFFINITY="KMP_AFFINITY=granularity=${GRAIN},compact,verbose"
  elif [ "${COMPILER}" = "gcc" ]; then
    CXX_VERSION=6.4.0
    CPU_AFFINITY="OMP_PLACES=${GRAIN} OMP_PROC_BIND=close OMP_DISPLAY_ENV=true"
  fi
  
  MAX_RANKS=$((MAX_NODES * RANKS_PER_NODE))  
  MAX_THREADS=$((CORES * THREADS_PER_CORE / RANKS_PER_NODE))
  
  # run dependent options
  if [ "${OPENMP_ONLY}" = true ]; then
    EXTENT=${MAX_THREADS}
    THREADS="\$i"
    INIT_THREADS=1
    RANKS="1"
    NODES=1
    MODE="threads_omp"
    THREAD_FLAG="y"
  else
    EXTENT=${MAX_RANKS}
    THREADS=${MAX_THREADS}
    INIT_THREADS=${THREADS}
    RANKS="\$i"
    NODES=${MAX_NODES}
    MODE="ranks_mpi"
    THREAD_FLAG="n"
  fi
}

update_app_options() {

  APP_ARGS=()

  # set app-specific argument list
  case "${APP}" in
    "t-junction")
      APP_ARGS=(
        "./app/portageapp/portageapp_${APP}_jali"
        "--dim=${DIMENSION}"
        "--nsourcecells=\${n_source}"
        "--ntargetcells=\${n_target}"
        "--conformal=${IS_CONFORMAL}"
        "--material_fields=${MATER_FIELD}"
        "--remap_order=${REMAP_ORDER}"
        "--limiter=${LIMITER}"
        "--bnd_limiter=${BOUNDARY_LIMITER}"
        "--only_threads=${THREAD_FLAG}"
        "--scaling=${SCALING_TYPE}"
      );;
    "timing")
      APP_ARGS=(
        "./app/${APP}app/${APP}app"
        "--dim=${DIMENSION}"
        "--nsourcecells=\${n_source}"
        "--ntargetcells=\${n_target}"
        "--conformal=${IS_CONFORMAL}"
        "--reverse_ranks=${REVERSE_RANKS}"
        "--weak_scale=${WEAK_SCALE_ONLY}"
        "--entity_kind=${ENTITY_KIND}"
        "--field_order=${FIELD_ORDER}"
        "--remap_order=${REMAP_ORDER}"
        "--only_threads=${THREAD_FLAG}"
        "--scaling=${SCALING_TYPE}"
      );;
    "rgmd")
      APP_ARGS=(
        "./app/portageapp/portageapp_${APP}_jali"
        "--problem=${PROBLEM_TYPE}"
        "--dim=${DIMENSION}"
        "--nsourcecells=\${n_source}"
        "--ntargetcells=\${n_target}"
        "--material_fields=${MATER_FIELD}"
        "--source_convex_cells=${CONVEX_SOURCE}"
        "--target_convex_cells=${CONVEX_TARGET}"
        "--remap_order=${REMAP_ORDER}"
        "--limiter=${LIMITER}"
        "--bnd_limiter=${BOUNDARY_LIMITER}"
        "--output_meshes=n"
        "--convergence_study=1"
        "--only_threads=${THREAD_FLAG}"
        "--scaling=${SCALING_TYPE}"
      );;
    (*)
      echo -e "\e[31mError: invalid or not yet supported app '${APP}'\e[0m"
      exit 1;;
  esac

  # formatting
  MPI_ARGS="--bind-to socket --report-bindings"
  for option in "${APP_ARGS[@]}"; do
    MPI_ARGS+=" \\"$'\n'"\t\t${option}"
  done
}

setup() {

  # parse options (requires GNU getopt).
  SHORT_OPT="h"
  LONG_OPT="help,app:,problem:,limiter:,bound-limit:,cluster:,nodes:,ranks:,"
  LONG_OPT+="partition:,user:,compiler:,hwthreads:,dim:,field:,field-order:,"
  LONG_OPT+="source:,target:,material-field:,material-file:,entity:,order:,"
  LONG_OPT+="conform,convex,thread-only,results:,scaling:"
  options=""

  # handle no option case
  if [ "$#" -eq 0 ]; then
    echo -e "\e[31mError: please specify the app at least\e[0m"
    exit 1
  elif ! options=$(getopt -o ${SHORT_OPT} -l ${LONG_OPT} -- "$@"); then
    print_usage
  fi
 
  # evaluate the option list 
  eval set -- "${options}"

  REBUILD=false

  # process args
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -h|--help) print_usage;;
      --app)
        case "$2" in
          "t-junction") APP="t-junction";;
          "core") APP="timing";;
          "multimat") APP="rgmd";;
          (*) APP="$2";;
        esac; shift;;
      --problem) PROBLEM_TYPE="$2"; shift;;
      --limiter) LIMITER="$2"; shift;;
      --bound-limit) BOUNDARY_LIMITER="$2"; shift;;
      --cluster) CLUSTER="$2"; shift;;
      --nodes) MAX_NODES="$2"; shift;;
      --ranks) RANKS_PER_NODE="$2"; shift;;
      --partition) PARTITION="$2"; shift;;
      --user) USER="$2"; shift;;
      --compiler) COMPILER="$2"; shift;;
      --hyper) HYPERTHREADING=true;;
      --dim) DIMENSION="$2"; shift;;
      --field) FIELD="$2"; shift;;
      --field-order) FIELD_ORDER="$2"; shift;;
      --source) [[ "$2" =~ ^[0-9]+$ ]] && SOURCE_MAX="$2" || SOURCE_FILE="${DATA_DIR}/$2"; shift;;
      --target) [[ "$2" =~ ^[0-9]+$ ]] && TARGET_MAX="$2" || TARGET_FILE="${DATA_DIR}/$2"; shift;;
      --material-field) MATER_FIELD="$2"; shift;;
      --material-file) MATER_FILE="${DATA_DIR}/$2"; shift;;
      --entity) ENTITY_KIND="$2"; shift;;
      --order) REMAP_ORDER="$2"; shift;;
      --conform) IS_CONFORMAL="y";;
      --convex) IS_CONVEX="y";;
      --thread-scale) OPENMP_ONLY=true; MAX_NODES=1;;
      --results) RESULT_FILE="$2"; shift;;
      --scaling) SCALING_TYPE="$2"; shift;;
      --) break;;
      -*) print_usage;;
      *) break;;
    esac
    shift
  done

  # set default params
  set_default_params;
  
  # set benchmark options 
  setup_run_options

  # check all params
  check_params
}

run_scaling() {

  # set app specific args
  update_app_options

  # generated files
  OUTPUT="${CLUSTER}_${APP}_${SCALING_TYPE}_scaling_${EXTENT}_${MODE}.log"
  SCRIPT="${CLUSTER}_${APP}_${SCALING_TYPE}_scaling_${EXTENT}_${MODE}.sh"

  echo -e "#!/bin/bash"                                                      > ${SCRIPT}
  echo -e ""                                                                >> ${SCRIPT}
  echo -e "# Batch script for ${APP} ${SCALING_TYPE} scaling app"           >> ${SCRIPT}
  echo -e "# Generated on $(date +'%Y-%m-%d %T')"                           >> ${SCRIPT}
  echo -e ""                                                                >> ${SCRIPT}
  echo -e "#SBATCH --time=2:00:00"                                          >> ${SCRIPT}
  echo -e "#SBATCH --partition=${PARTITION}"                                >> ${SCRIPT}
  echo -e "#SBATCH --nodes=${NODES}"                                        >> ${SCRIPT}
  echo -e "#SBATCH --ntasks-per-node=${RANKS_PER_NODE}"                     >> ${SCRIPT}
  echo -e "#SBATCH --job-name=remap"                                        >> ${SCRIPT}
  echo -e "#SBATCH --error=${OUTPUT}"                                       >> ${SCRIPT}
  echo -e "#SBATCH --output=${OUTPUT}"                                      >> ${SCRIPT}
  echo -e "#SBATCH --no-requeue"                                            >> ${SCRIPT}
  echo -e "#SBATCH --signal=23@60"                                          >> ${SCRIPT}
  echo -e ""                                                                >> ${SCRIPT}
  echo -e "# move to the build directory"                                   >> ${SCRIPT}
  echo -e "cd ${BUILD_DIR}"                                                 >> ${SCRIPT}
  echo -e ""                                                                >> ${SCRIPT}
  echo -e "# load modules"                                                  >> ${SCRIPT}
  echo -e "module load ${COMPILER}/${CXX_VERSION}"                          >> ${SCRIPT}

  if [ "${CLUSTER}" = "darwin" ]; then
    echo -e "module load openmpi/${MPI_VERSION}-${COMPILER}_${CXX_VERSION}" >> ${SCRIPT}
    echo -e "module load boost/${BOOST_VERSION}"                            >> ${SCRIPT}
  else
    echo -e "module load openmpi/${MPI_VERSION}"                            >> ${SCRIPT}
  fi

  echo -e ""                                                                >> ${SCRIPT}
  echo -e "# set thread-core affinity"                                      >> ${SCRIPT}
  echo -e "export ${CPU_AFFINITY}"                                          >> ${SCRIPT}
  echo -e ""                                                                >> ${SCRIPT}
  echo -e "for ((i=1; i <= ${EXTENT}; i*=2)); do"                           >> ${SCRIPT}
  echo -e "  # set number of threads"                                       >> ${SCRIPT}
  echo -e "  export OMP_NUM_THREADS=${THREADS}"                             >> ${SCRIPT}

  if [ "${SCALING_TYPE}" = "weak" ]; then
    echo -e ""                                                              >> ${SCRIPT}
    echo -e "  # update per-axis source and target mesh resolution"         >> ${SCRIPT}
    echo -e "  n_source=\`bc -l <<< \"e(l(\$i)/${DIMENSION}) * ${SOURCE_MAX}\"|cut -f1 -d'.'\`" >> ${SCRIPT}
    echo -e "  n_target=\`bc -l <<< \"e(l(\$i)/${DIMENSION}) * ${TARGET_MAX}\"|cut -f1 -d'.'\`" >> ${SCRIPT}
    echo -e "  echo \"n_source per-axis: \${n_source}\""                    >> ${SCRIPT}
    echo -e "  echo \"n_target per-axis: \${n_target}\""                    >> ${SCRIPT}
    echo -e ""                                                              >> ${SCRIPT}
  else
    echo -e "  n_source=${SOURCE_MAX}"                                      >> ${SCRIPT}
    echo -e "  n_target=${TARGET_MAX}"                                      >> ${SCRIPT}
  fi

  echo -e "  # run afterwards"                                              >> ${SCRIPT}
  echo -e "  mpirun -np ${RANKS} ${MPI_ARGS}"                               >> ${SCRIPT}
  echo -e "done"                                                            >> ${SCRIPT}
  echo -e "# ========================================================"      >> ${SCRIPT}

  # Run it
  echo "Running ${APP} ${SCALING_TYPE} scaling"
  sbatch -v ${SCRIPT}
}

generate_gnuplot() {
  
  MODE=""
  XMAX=0
  XLABEL=""
  XCOL=0
  SUFFIX=""
  
  if [ "${OPENMP_ONLY}" = true ]; then 
    MODE="OpenMP"
    XMAX=${MAX_THREADS}
    XLABEL="threads"
    XCOL=2
    SUFFIX="omp"
  else
    MODE="MPI+OpenMP"
    XMAX=${MAX_RANKS}
    XLABEL="ranks"
    XCOL=1
    SUFFIX="mpi"
  fi

  FIELDS=(
    "w lp lc rgb '#CB0707' pt 5"
    "w lp lc rgb '#000000' pt 3"
    "w lines lc rgb '#0000CD'"
    "w lp lc rgb '#4682B4' pt 4"
    "w lp lc rgb '#800080' pt 2"
  )
 
  # generate distinct scripts for strong and weak scaling
  INPUT="${APP}_${SCALING_TYPE}_scaling_${SUFFIX}.dat"
  OUTPUT="${CLUSTER}_${APP}_${SCALING_TYPE}_scaling_${SUFFIX}.eps"
  SCRIPT="${CLUSTER}_${APP}_${SCALING_TYPE}_scaling_${SUFFIX}.gnu"

  echo "# Gnuplot script for ${APP} ${SCALING_TYPE} scaling"         > ${SCRIPT}
  echo "# Generated on $(date +'%Y-%m-%d %T')"                      >> ${SCRIPT}
  echo ""                                                           >> ${SCRIPT}
  echo "reset"                                                      >> ${SCRIPT}
  echo "set terminal postscript eps enhanced color 14 size 8cm,9cm" >> ${SCRIPT}
  echo "set output \"${OUTPUT}\""                                   >> ${SCRIPT}
  echo "set title \"${APP} ${MODE} ${SCALING_TYPE} scaling\""       >> ${SCRIPT}
  echo "set size ratio 1"                                           >> ${SCRIPT}
  echo "set xlabel \"${XLABEL}\""                                   >> ${SCRIPT}
  echo "set ylabel \"elapsed (s)\""                                 >> ${SCRIPT}
  echo "set key below maxcols 2"                                    >> ${SCRIPT}
  echo ""                                                           >> ${SCRIPT}
  echo "stats '${INPUT}' using 6 name 'time'"                       >> ${SCRIPT}
  if [ "${SCALING_TYPE}" = "strong" ]; then
    echo "linear(x)=time_max/x"                                     >> ${SCRIPT}
  else
    echo "linear(x)=time_min"                                       >> ${SCRIPT}
  fi
  echo ""                                                           >> ${SCRIPT}
  echo "set grid"                                                   >> ${SCRIPT}
  echo "set xrange [1:${XMAX}]"                                     >> ${SCRIPT}
  echo "set logscale x 2"                                           >> ${SCRIPT}
  echo "set logscale y 2"                                           >> ${SCRIPT}
  echo ""                                                           >> ${SCRIPT}
  echo "plot '${INPUT}' u ${XCOL}:6 t 'remap'     ${FIELDS[0]},\\"  >> ${SCRIPT}
  echo "     '${INPUT}' u ${XCOL}:7 t 'total'     ${FIELDS[1]},\\"  >> ${SCRIPT}
  echo "     linear(x)              t 'linear'    ${FIELDS[2]},\\"  >> ${SCRIPT}
  echo "     '${INPUT}' u ${XCOL}:3 t 'mesh-init' ${FIELDS[3]},\\"  >> ${SCRIPT}
  echo "     '${INPUT}' u ${XCOL}:5 t 'interface' ${FIELDS[4]}"     >> ${SCRIPT}


  # move to build directory
  mv ${SCRIPT} ${BUILD_DIR}
  echo "Gnuplot script '${SCRIPT}' generated in build directory"
}

# main
setup "$@" && run_scaling && generate_gnuplot
