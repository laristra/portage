#!/bin/bash

# Build script for Portage on Darwin
# Author: Hoby Rakotoarivelo

# Paths
SOURCE_DIR="$(pwd)/.."
RISTRA_DIR="/usr/projects/ngc/private"
BUILD_DIR=""

# Note:
# -e: fail if some command exits with non zero status
# -u: treat undefined variables as error
# -o pipefail: pipe ok if all involved commands are ok
set -e             
set -u
set -o pipefail

# build options
REBUILD_ALL=false
PERF_MODE=true
USE_INTEL=true
USE_CUDA=false

# tools and deps versions
INTEL_VERSION=""
GNU_VERSION=""
MPI_VERSION=""
TANGRAM_VERSION=""
JALI_VERSION=""
XMOF2D_VERSION=0.9.4
LAPACKE_VERSION=3.8.0
BOOST_VERSION=1.68.0

print_usage() {
  echo "Usage: ./darwin-build [options]"
  echo "Options:"
  echo "  -h, --help              show this help message and exit"
  echo "  -c, --compiler <choice> select compiler [intel|gnu]"
  echo "  -a, --all               clean rebuild"
  echo "  -p, --perfs             build for performance profiling"
  echo "  -g, --cuda              use CUDA backend"
  echo "  -b, --build-dir <path>  use specific build directory"
  exit 1
}

setup(){

  SHORT_OPT="hc:apgb:"
  LONG_OPT="help,compiler:,all,perfs,cuda,build-dir:"

  # parse options (requires GNU getopt).
  if [ "$#" -eq 0 ]; then
    echo -e "Warning: no params supplied"
    print_usage
  elif ! options=$(getopt -o "${SHORT_OPT}" -l "${LONG_OPT}" -- "$@"); then
    print_usage
  fi

  # evaluate the option list 
  eval set -- "${options}"

  # process args
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -h|--help) print_usage;;
      -c|--compiler) [ "$2" = "gnu" ] && USE_INTEL=false || USE_INTEL=true; shift;;
      -a|--all) REBUILD_ALL=true;;
      -p|--perfs) PERF_MODE=true;;
      -g|--cuda) USE_CUDA=true;;
      -b|--build-dir) BUILD_DIR="$2";;
      --) break;;
      -*) print_usage;;
      *) break;;
    esac
    shift
  done

  # set_version_numbers
  if [ "${USE_INTEL}" = true ]; then 
    INTEL_VERSION=18.0.3
    MPI_VERSION=2.1.5
    JALI_VERSION=1.0.4
    TANGRAM_VERSION=0.9.3
    [ "${BUILD_DIR}" != "" ] || BUILD_DIR="${SOURCE_DIR}/build-intel"
  else
    GNU_VERSION=6.4.0
    MPI_VERSION=2.1.2
    JALI_VERSION=1.0.3
    TANGRAM_VERSION=0.9.5
    [ "${BUILD_DIR}" != "" ] || BUILD_DIR="${SOURCE_DIR}/build-gnu"
  fi
  
  echo "SOURCE_DIR: ${SOURCE_DIR}"
  echo "BUILD_DIR: ${BUILD_DIR}"
  
  if [ ! -d ${BUILD_DIR} ]; then
    REBUILD_ALL=true
  fi

  # cleanup build directory if necessary
  if [ "${REBUILD_ALL}" = true ]; then
    rm -rf ${BUILD_DIR} && mkdir ${BUILD_DIR} && cd ${BUILD_DIR}
  else
    cd ${BUILD_DIR} #&& rm -rf CMake*
  fi

  # load required modules
  module purge
  module load cmake
  module load boost/${BOOST_VERSION}

  if [ "$USE_INTEL" = true ]; then
    module load intel/${INTEL_VERSION}
    module load openmpi/${MPI_VERSION}-intel_${INTEL_VERSION}
    COMP="Intel"
  else
    module load gcc/${GNU_VERSION}
    module load openmpi/${MPI_VERSION}-gcc_${GNU_VERSION}
    COMP="Gnu"
  fi

  if [ "$USE_CUDA" = true ]; then
    module load cuda
    BACKEND="CUDA"
  else
    BACKEND="OpenMP"
  fi
  module list
  
  # print confirmation message
  echo "Building Portage with ${BACKEND} backend using ${COMP} compiler."
}

build(){
  
  # set dependencies root directories
  BOOST_DIR="/projects/opt/centos7/boost/${BOOST_VERSION}"
  THRUST_DIR="${RISTRA_DIR}/include"
  NUM_JOBS=16
  
  if [ "${USE_INTEL}" = true ]; then
    LAPACKE_DIR="${RISTRA_DIR}/lapack/${LAPACKE_VERSION}-patched-intel-${INTEL_VERSION}"
    JALI_DIR="${RISTRA_DIR}/jali/${JALI_VERSION}-intel-${INTEL_VERSION}-openmpi-${MPI_VERSION}/lib"
    TANGRAM_DIR="${RISTRA_DIR}/tangram/${TANGRAM_VERSION}-intel-${INTEL_VERSION}-openmpi-${MPI_VERSION}"
    XMOF2D_DIR="${RISTRA_DIR}/xmof2d/${XMOF2D_VERSION}-intel-${INTEL_VERSION}/share/cmake"
    TCMALLOC_LIB="${RISTRA_DIR}/tcmalloc/intel-${INTEL_VERSION}/lib/libtcmalloc.so"
  else
    LAPACKE_DIR="${RISTRA_DIR}/lapack/${LAPACKE_VERSION}-gcc-${GNU_VERSION}"
    JALI_DIR="${RISTRA_DIR}/jali/${JALI_VERSION}-gcc-${GNU_VERSION}-openmpi-${MPI_VERSION}/lib"
    TANGRAM_DIR="${RISTRA_DIR}/tangram/${TANGRAM_VERSION}-gcc-${GNU_VERSION}-openmpi-${MPI_VERSION}"
    XMOF2D_DIR="${RISTRA_DIR}/xmof2d/${XMOF2D_VERSION}-gcc-${GNU_VERSION}/share/cmake"
    TCMALLOC_LIB="${RISTRA_DIR}/tcmalloc/gcc-${GNU_VERSION}/lib/libtcmalloc.so"
  fi
    
  cd ${BUILD_DIR} 

  if [ "$PERF_MODE" = true ]; then 
    # use head version
    TANGRAM_HEAD="/home/hoby/dev/remap/tangram-legacy/install"
    # set device backend
    [ "$USE_CUDA" = true ] && BACKEND=THRUST_DEVICE_SYSTEM_CUDA || BACKEND=THRUST_DEVICE_SYSTEM_OMP
   
    # run cmake 
    cmake \
      -DCMAKE_BUILD_TYPE=Release \
      -DENABLE_UNIT_TESTS=True \
      -DENABLE_APP_TESTS=True \
      -DENABLE_MPI=True \
      -DENABLE_TCMALLOC=True \
      -DENABLE_THRUST=True \
      -DTHRUST_HOST_SYSTEM=THRUST_HOST_SYSTEM_OMP \
      -DTHRUST_DEVICE_SYSTEM=${BACKEND} \
      -DTHRUST_DIR=${THRUST_DIR} \
      -DJali_DIR=${JALI_DIR} \
      -DTANGRAM_DIR=${TANGRAM_HEAD} \
      -DXMOF2D_DIR=${XMOF2D_DIR} \
      -DLAPACKE_DIR=${LAPACKE_DIR} \
      ${SOURCE_DIR}    
  else
    cmake \
      -DCMAKE_BUILD_TYPE=Release \
      -DENABLE_UNIT_TESTS=True \
      -DENABLE_APP_TESTS=True \
      -DENABLE_MPI=True \
      -DENABLE_TCMALLOC=False \
      -DENABLE_THRUST=False \
      -DJali_DIR=${JALI_DIR} \
      -DTANGRAM_DIR=${TANGRAM_DIR} \
      -DXMOF2D_DIR=${XMOF2D_DIR} \
      -DLAPACKE_DIR=${LAPACKE_DIR} \
      ${SOURCE_DIR}    
  fi
  
  # compile eventually and run tests  
  make -j${NUM_JOBS}

  if [ "${REBUILD_ALL}" = true ]; then
    ctest -j${NUM_JOBS} --output-on-failure
  fi
}

# main
setup "$@" && build
